# Maintained by Ansible

{% for key, value in kafka_connect.properties.items() %}
{{key}}={{value}}
{% endfor %}

# Kafka Connect Configuration
listeners={{kafka_connect_http_protocol}}://0.0.0.0:{{kafka_connect_rest_port}}
rest.advertised.listener={{kafka_connect_http_protocol}}
rest.advertised.host.name={{inventory_hostname}}
rest.advertised.port={{kafka_connect_rest_port}}
{% if kafka_connect_ssl_enabled|bool %}
listeners.{{kafka_connect_http_protocol|lower}}.ssl.keystore.location={{kafka_connect_keystore_path}}
listeners.{{kafka_connect_http_protocol|lower}}.ssl.keystore.password={{kafka_connect_keystore_storepass}}
listeners.{{kafka_connect_http_protocol|lower}}.ssl.key.password={{kafka_connect_keystore_keypass}}
{% if kafka_connect_ssl_mutual_auth_enabled|bool %}
listeners.{{kafka_connect_http_protocol|lower}}.ssl.client.auth=false
listeners.{{kafka_connect_http_protocol|lower}}.ssl.truststore.location={{kafka_connect_truststore_path}}
listeners.{{kafka_connect_http_protocol|lower}}.ssl.truststore.password={{kafka_connect_truststore_storepass}}
{% endif %}
{% endif %}

# Kafka Broker Configuration
bootstrap.servers={% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}{{ host }}:{{kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']}}{% endfor %}

{% set config_prefix = '' %}
{% set listener = kafka_broker_listeners[kafka_connect_kafka_listener_name] %}
{% set truststore_path = kafka_connect_truststore_path %}
{% set truststore_storepass = kafka_connect_truststore_storepass %}
{% set keystore_path = kafka_connect_keystore_path %}
{% set keystore_storepass = kafka_connect_keystore_storepass %}
{% set keystore_keypass = kafka_connect_keystore_keypass %}
{% set sasl_plain_username = sasl_plain_users.kafka_connect.principal %}
{% set sasl_plain_password = sasl_plain_users.kafka_connect.password %}
{% set sasl_scram_username = sasl_scram_users.kafka_connect.principal %}
{% set sasl_scram_password = sasl_scram_users.kafka_connect.password %}
{% set kerberos_keytab_path = kafka_connect_kerberos_keytab_path %}
{% set kerberos_principal = kafka_connect_kerberos_principal %}
{% set oauth_username = kafka_connect_ldap_user %}
{% set oauth_password = kafka_connect_ldap_password %}
{% include 'roles/confluent.kafka_broker/templates/kafka_client.j2' %}

{% set schema_registries = groups.get('schema_registry', []) %}
{% if schema_registries %}

# Schema Registry Configuration
value.converter.schema.registry.url={% for host in groups['schema_registry'] %}{% if loop.index > 1%},{% endif %}{{ schema_registry_http_protocol }}://{{ host }}:{{ schema_registry_listener_port }}{% endfor %}

{% if schema_registry_ssl_enabled|bool %}
value.converter.schema.registry.ssl.truststore.location={{kafka_connect_truststore_path}}
value.converter.schema.registry.ssl.truststore.password={{kafka_connect_truststore_storepass}}
value.converter.schema.registry.ssl.keystore.location={{kafka_connect_keystore_path}}
value.converter.schema.registry.ssl.keystore.password={{kafka_connect_keystore_storepass}}
value.converter.schema.registry.ssl.key.password={{kafka_connect_keystore_keypass}}
{% endif %}

key.converter.schema.registry.url={% for host in groups['schema_registry'] %}{% if loop.index > 1%},{% endif %}{{ schema_registry_http_protocol }}://{{ host }}:{{ schema_registry_listener_port }}{% endfor %}

{% if schema_registry_ssl_enabled|bool %}
key.converter.schema.registry.ssl.truststore.location={{kafka_connect_truststore_path}}
key.converter.schema.registry.ssl.truststore.password={{kafka_connect_truststore_storepass}}
key.converter.schema.registry.ssl.keystore.location={{kafka_connect_keystore_path}}
key.converter.schema.registry.ssl.keystore.password={{kafka_connect_keystore_storepass}}
key.converter.schema.registry.ssl.key.password={{kafka_connect_keystore_keypass}}
{% endif %}
{% endif %}

# Connect Producer Configuration {# Producer should not have jaas config, set in worker properties #}

producer.bootstrap.servers={% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}{{ host }}:{{kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']}}{% endfor %}

producer.security.protocol={{kafka_broker_listeners[kafka_connect_kafka_listener_name] | kafka_protocol_defaults(sasl_protocol, ssl_enabled) }}
{% if kafka_broker_listeners[kafka_connect_kafka_listener_name]['ssl_enabled'] | default(ssl_enabled) | bool %}
producer.ssl.truststore.location={{kafka_connect_truststore_path}}
producer.ssl.truststore.password={{kafka_connect_truststore_storepass}}
{% if kafka_broker_listeners[kafka_connect_kafka_listener_name]['ssl_mutual_auth_enabled'] | default(ssl_mutual_auth_enabled) | bool %}
producer.ssl.keystore.location={{kafka_connect_keystore_path}}
producer.ssl.keystore.password={{kafka_connect_keystore_storepass}}
producer.ssl.key.password={{kafka_connect_keystore_keypass}}
{% endif %}
{% endif %}
{% if kafka_broker_listeners[kafka_connect_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'PLAIN' %}
producer.sasl.mechanism=PLAIN
{% endif %}
{% if kafka_broker_listeners[kafka_connect_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'GSSAPI' %}
producer.sasl.mechanism=GSSAPI
producer.sasl.kerberos.service.name={{kerberos_kafka_broker_primary}}
{% endif %}
{% if kafka_broker_listeners[kafka_connect_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'SCRAM-SHA-256' %}
producer.sasl.mechanism=SCRAM-SHA-256
{% endif %}
{% if kafka_broker_listeners[kafka_connect_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'OAUTHBEARER' %}
producer.sasl.mechanism=OAUTHBEARER
producer.sasl.login.callback.handler.class=io.confluent.kafka.clients.plugins.auth.token.TokenUserLoginCallbackHandler
{% endif %}

# Connect Consumer Configuration {# Consumers should not have jaas config, set in worker properties #}

consumer.bootstrap.servers={% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}{{ host }}:{{kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']}}{% endfor %}

consumer.security.protocol={{kafka_broker_listeners[kafka_connect_kafka_listener_name] | kafka_protocol_defaults(sasl_protocol, ssl_enabled) }}
{% if kafka_broker_listeners[kafka_connect_kafka_listener_name]['ssl_enabled'] | default(ssl_enabled) | bool %}
consumer.ssl.truststore.location={{kafka_connect_truststore_path}}
consumer.ssl.truststore.password={{kafka_connect_truststore_storepass}}
{% if kafka_broker_listeners[kafka_connect_kafka_listener_name]['ssl_mutual_auth_enabled'] | default(ssl_mutual_auth_enabled) | bool %}
consumer.ssl.keystore.location={{kafka_connect_keystore_path}}
consumer.ssl.keystore.password={{kafka_connect_keystore_storepass}}
consumer.ssl.key.password={{kafka_connect_keystore_keypass}}
{% endif %}
{% endif %}
{% if kafka_broker_listeners[kafka_connect_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'PLAIN' %}
consumer.sasl.mechanism=PLAIN
{% endif %}
{% if kafka_broker_listeners[kafka_connect_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'GSSAPI' %}
consumer.sasl.mechanism=GSSAPI
consumer.sasl.kerberos.service.name={{kerberos_kafka_broker_primary}}
{% endif %}
{% if kafka_broker_listeners[kafka_connect_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'SCRAM-SHA-256' %}
consumer.sasl.mechanism=SCRAM-SHA-256
{% endif %}
{% if kafka_broker_listeners[kafka_connect_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'OAUTHBEARER' %}
consumer.sasl.mechanism=OAUTHBEARER
consumer.sasl.login.callback.handler.class=io.confluent.kafka.clients.plugins.auth.token.TokenUserLoginCallbackHandler
{% endif %}

# Producer Monitoring Configuration
producer.confluent.monitoring.interceptor.bootstrap.servers={% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}{{ host }}:{{kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']}}{% endfor %}

{% set config_prefix = 'producer.confluent.monitoring.interceptor.' %}
{% include 'roles/confluent.kafka_broker/templates/kafka_client.j2' %}

# Consumer Monitoring Configuration
consumer.confluent.monitoring.interceptor.bootstrap.servers={% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}{{ host }}:{{kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']}}{% endfor %}

{% set config_prefix = 'consumer.confluent.monitoring.interceptor.' %}
{% include 'roles/confluent.kafka_broker/templates/kafka_client.j2' %}

{% if rbac_enabled|bool %}
# Secret Registry Configuration
rest.extension.classes=io.confluent.connect.security.ConnectSecurityExtension{% if kafka_connect_secret_registry_enabled|bool %},io.confluent.connect.secretregistry.ConnectSecretRegistryExtension

config.providers=secret
config.providers.secret.class=io.confluent.connect.secretregistry.rbac.config.provider.InternalSecretConfigProvider
config.providers.secret.param.master.encryption.key={{kafka_connect_secret_registry_key}}
config.providers.secret.param.kafkastore.bootstrap.servers={% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}{{ host }}:{{kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']}}{% endfor %}

{% set config_prefix = 'config.providers.secret.param.kafkastore.' %}
{% include 'roles/confluent.kafka_broker/templates/kafka_client.j2' %}

{% endif %}
# RBAC Configuration
rest.servlet.initializor.classes=io.confluent.common.security.jetty.initializer.InstallBearerOrBasicSecurityHandler
public.key.path={{rbac_enabled_public_pem_path}}

confluent.metadata.bootstrap.server.urls={% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}{{mds_http_protocol}}://{{ host }}:{{mds_port}}{% endfor %}

confluent.metadata.basic.auth.user.info={{kafka_connect_ldap_user}}:{{kafka_connect_ldap_password}}
confluent.metadata.http.auth.credentials.provider=BASIC
{% endif %}
