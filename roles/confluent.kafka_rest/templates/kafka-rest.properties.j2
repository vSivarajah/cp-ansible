# Maintained by Ansible
{% for key, value in kafka_rest.properties.items() %}
{{key}}={{value}}
{% endfor %}

# Kafka Rest Configuration
listeners={{kafka_rest_http_protocol}}://0.0.0.0:{{kafka_rest_port}}
host.name={{inventory_hostname}}
{% if kafka_rest_ssl_enabled|bool %}
ssl.keystore.location={{kafka_rest_keystore_path}}
ssl.keystore.password={{kafka_rest_keystore_storepass}}
ssl.key.password={{kafka_rest_keystore_keypass}}
{% if kafka_rest_ssl_mutual_auth_enabled|bool or mds_ssl_enabled|bool %}
ssl.truststore.location={{kafka_rest_truststore_path}}
ssl.truststore.password={{kafka_rest_truststore_storepass}}
ssl.client.auth=false
{% endif %}
{% endif %}

# Zookeeper Configuration
zookeeper.connect={% for host in groups['zookeeper'] %}{% if loop.index > 1%},{% endif %}{{ host }}:{{zookeeper.properties.clientPort}}{% endfor %}


# Kafka Broker Configuration
bootstrap.servers={% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}{{ host }}:{{kafka_broker_listeners[kafka_rest_kafka_listener_name]['port']}}{% endfor %}

{% set config_prefix = 'client.' %}
{% set listener = kafka_broker_listeners[kafka_rest_kafka_listener_name] %}
{% set truststore_path = kafka_rest_truststore_path %}
{% set truststore_storepass = kafka_rest_truststore_storepass %}
{% set keystore_path = kafka_rest_keystore_path %}
{% set keystore_storepass = kafka_rest_keystore_storepass %}
{% set keystore_keypass = kafka_rest_keystore_keypass %}
{% set sasl_plain_username = sasl_plain_users.kafka_rest.principal %}
{% set sasl_plain_password = sasl_plain_users.kafka_rest.password %}
{% set sasl_scram_username = sasl_scram_users.kafka_rest.principal %}
{% set sasl_scram_password = sasl_scram_users.kafka_rest.password %}
{% set kerberos_keytab_path = kafka_rest_kerberos_keytab_path %}
{% set kerberos_principal = kafka_rest_kerberos_principal %}
{% set oauth_username = kafka_rest_ldap_user %}
{% set oauth_password = kafka_rest_ldap_password %}
{% include 'roles/confluent.kafka_broker/templates/kafka_client.j2' %}

{% set schema_registries = groups.get('schema_registry', []) %}
{% if schema_registries %}
# Schema Registry Configuration
schema.registry.url={% for host in groups['schema_registry'] %}{% if loop.index > 1%},{% endif %}{{ schema_registry_http_protocol }}://{{ host }}:{{ schema_registry_listener_port }}{% endfor %}

{% if schema_registry_ssl_enabled|bool %}
schema.registry.ssl.truststore.location={{kafka_rest_truststore_path}}
schema.registry.ssl.truststore.password={{kafka_rest_truststore_storepass}}
schema.registry.ssl.keystore.location={{kafka_rest_keystore_path}}
schema.registry.ssl.keystore.password={{kafka_rest_keystore_storepass}}
schema.registry.ssl.key.password={{kafka_rest_keystore_keypass}}
{% endif %}
{% endif %}

# Monitoring Configuration
confluent.monitoring.interceptor.bootstrap.servers={% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}{{ host }}:{{kafka_broker_listeners[kafka_rest_kafka_listener_name]['port']}}{% endfor %}

{% set config_prefix = 'confluent.monitoring.interceptor.' %}
{% include 'roles/confluent.kafka_broker/templates/kafka_client.j2' %}

{% if rbac_enabled|bool %}
# RBAC Configuration
kafka.rest.resource.extension.class=io.confluent.kafkarest.security.KafkaRestSecurityResourceExtension
rest.servlet.initializor.classes=io.confluent.common.security.jetty.initializer.InstallBearerOrBasicSecurityHandler
public.key.path={{rbac_enabled_public_pem_path}}
client.confluent.metadata.server.urls.max.age.ms=60000

confluent.metadata.bootstrap.server.urls={% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}{{mds_http_protocol}}://{{ host }}:{{mds_port}}{% endfor %}

confluent.metadata.server.urls.max.age.ms=60000
confluent.metadata.basic.auth.user.info={{kafka_rest_ldap_user}}:{{kafka_rest_ldap_password}}
confluent.metadata.http.auth.credentials.provider=BASIC
{% endif %}
